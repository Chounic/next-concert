import { getSecrets } from '@netlify/functions'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { ReactElement, useCallback, useState } from 'react'
import Layout from '../components/Layout'
import { SpotifyContext } from '../context/SpotifyProvider'
import styles from '../styles/Home.module.css'
import useEmblaCarousel from 'embla-carousel-react'
import SvgAngleCarreGauche from '../images/svg/AngleCarreGauche'
import SvgAngleCarreDroit from '../images/svg/AngleCarreDroit'
import anglePetitGauche from "../images/svg/angle-petit-gauche.png"
import anglePetitDroit from "../images/svg/angle-petit-droit.png"
import calendar from '../images/svg/calendar.png';
import localisation from '../images/svg/localisation.png';
import punaise from '../images/svg/punaise.png';




export default function Index(props: any) {

  const [emblaRefAttractions, emblaApiAttractions] = useEmblaCarousel({ slidesToScroll: 7 })
  const [emblaRefEvents, emblaApiEvents] = useEmblaCarousel({ slidesToScroll: 4 })

  const scrollPrevAttractions = useCallback(() => {
    if (emblaApiAttractions) emblaApiAttractions.scrollPrev()
  }, [emblaApiAttractions])

  const scrollNextAttractions = useCallback(() => {
    if (emblaApiAttractions) emblaApiAttractions.scrollNext()
  }, [emblaApiAttractions])

  const scrollPrevEvents = useCallback(() => {
    if (emblaApiEvents) emblaApiEvents.scrollPrev()
  }, [emblaApiEvents])

  const scrollNextEvents = useCallback(() => {
    if (emblaApiEvents) emblaApiEvents.scrollNext()
  }, [emblaApiEvents])


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className=' text-2xl lg:text-3xl py-8 pl-12 lg:pl-28'>Tous les artistes du moment</div>
      <div className='overflow-hidden group relative px-10'>
        <div className="overflow-hidden" ref={emblaRefAttractions}>

          <div className="flex box-border divide-x-2 h-[200px] ">
            {/* {props.attractions.map((item: any, index: any) => {
              return (

                <div key={index} className='flex-[0_0_200px] p-2 bg-white border-zinc-200 transition ease-in-out delay-75 duration-100 hover:scale-110 border-y-2 first:border-l-2 last:border-r-2 ...' >
                  <div className=' h-[130px] relative' >
                    {item.images[0].url && <Image src={item.images[0].url} alt="artist photo" layout='fill' objectFit='cover' />}
                  </div>
                  <p className='text-center text-sm mt-2'>{item.name}</p>
                </div>
              )
            })
            } */}
          </div>
        </div>
        <button className="absolute w-10 h-10 bottom-20 opacity-30 transition ease-in-out delay-100 duration-150 group-hover:opacity-70 left-0" onClick={scrollPrevAttractions}>
          <Image src={anglePetitGauche} alt="next button" className='transition ease-in-out active:scale-75' layout='fill' objectFit='cover' />
        </button>
        <button className="absolute w-10 h-10 bottom-20 opacity-30 transition ease-in-out delay-100 duration-150 group-hover:opacity-70 right-0" onClick={scrollNextAttractions}>
          <Image src={anglePetitDroit} alt="next button" className='transition ease-in-out active:scale-75' layout='fill' objectFit='cover' />
        </button>
      </div>


      <div className=' text-2xl lg:text-3xl pt-16 pb-8 pl-12 lg:pl-28'>Les prochaines dates de concerts Ã  {props.pickedCity}</div>

      <div className='overflow-hidden group relative'>
        <div className="" ref={emblaRefEvents}>

          <div className="flex box-border divide-x-2 h-[500px] ">
          </div>
        </div>
        <button className="absolute w-10 h-10 bottom-56 opacity-30 transition ease-in-out delay-100 duration-150 group-hover:opacity-70 left-0" onClick={scrollPrevEvents}>
          <SvgAngleCarreGauche className='transition ease-in-out active:scale-90' />
        </button>
        <button className="absolute w-10 h-10 bottom-56 opacity-30 transition ease-in-out delay-100 duration-150 group-hover:opacity-70 right-0" onClick={scrollNextEvents}>
          <SvgAngleCarreDroit className='transition ease-in-out active:scale-90' />
        </button>
      </div>
    </div>
  )
}

Index.getLayout = function getLayout(page: ReactElement) {

  const toktok = 'toktok';


  return (

    <Layout>
      {page}
    </Layout>

  )
}





export async function getStaticProps() {

  const secrets = await getSecrets();

  const attractionsRes = await fetch(`https://app.ticketmaster.com/discovery/v2/attractions.json?apikey=${process.env.ACCESS_TOKEN}&classificationName=[Music]&size=40`);
  const attractionsJsonRes = await attractionsRes.json();
  let embeddedAttractions ;
  if (!attractionsJsonRes._embedded) null
  else embeddedAttractions = attractionsJsonRes._embedded;

  const citiesId = [
    {
      name: 'New York',
      dmaId: '345'
    },
    {
      name: 'Los Angeles',
      dmaId: '324'

    },
    {
      name: 'Houston',
      dmaId: '300'

    },
    {
      name: 'Atlanta',
      dmaId: '220'

    },
    {
      name: 'Phoenix',
      dmaId: '359'

    }
  ];
  const pickedCity = citiesId[Math.floor(Math.random() * 5)];

  const eventsRes = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${process.env.ACCESS_TOKEN}&classificationName=[Music]&countryCode=US&dmaId=${pickedCity.dmaId}&size=200`);
  const eventsJsonRes = await eventsRes.json();
  let embeddedEvents ;
  if (!eventsJsonRes._links) null
  else embeddedEvents = eventsJsonRes._links;
  // const events = embeddedEvents.events.filter((item: any, index: number, self: any) => {
  //   return index === self.findIndex((t: any) => (
  //     t.name === item.name
  //   ))
  // });



  return {
    props: {
      secrets,
      attractions: embeddedAttractions || null,
      events: embeddedEvents || null,
      pickedCity: pickedCity.name
    }
  }
}



