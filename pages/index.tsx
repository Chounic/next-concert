import { getSecrets } from '@netlify/functions'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { ReactElement, useState } from 'react'
import ConcertImage from '../components/ConcertImage'
import Layout from '../components/Layout'
import { SpotifyContext } from '../context/SpotifyProvider'
import styles from '../styles/Home.module.css'


export default function Index (props: any) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='container xl:px-60'>
      <div className="flex-row flex-wrap grid grid-cols-4 gap-3">
{  props.data.results.map( (item: any, index: any) => {
  console.log("ðŸš€ ~ file: index.tsx ~ line 24 ~ {props.data.results.map ~ item", item)
  return (
      <Link 
      key={index} 
            href={{
              pathname: '/Home',
              query: { token: props.secrets.spotify.bearerToken },
            }}
          >
    <div className='box-border h-46 p-4 border-4 ...' style={{ backgroundColor: 'green', border: '5px dashed black'}}>
      <ConcertImage data={item} token={props.secrets.spotify.bearerToken} />
      <p>{item.title}</p>
      {item.entities[0]? <p>{item.entities[0].name}</p> : ''}
      <p>{item.start}</p>
    </div>
      </Link>
  )
})
}
        </div>
      </main>
    </div>
  )
}

Index.getLayout = function getLayout(page: ReactElement) {

const toktok = 'toktok';


  return (
    
    <Layout>
      {page}
    </Layout>

  )
}





export async function getStaticProps() {

  const secrets = await getSecrets();
  const res = await fetch(`https://api.predicthq.com/v1/events?limit=30&category=concerts&country=FR&location_around.origin=48.856614,2.3522219&location_around.offset=10km`, {
    headers: {
      Authorization: `Bearer ${process.env.ACCESS_TOKEN}`, 
      Accept: 'application/json', 
      'Content-Type': 'application/json'
    }
  }); 
  const data = await res.json();

  return {
    props: {
      secrets, 
      data
    }
  }
}



