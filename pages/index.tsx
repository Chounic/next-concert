import { getSecrets } from '@netlify/functions'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { ReactElement, useCallback, useState } from 'react'
import ConcertImage from '../components/ConcertImage'
import Layout from '../components/Layout'
import { SpotifyContext } from '../context/SpotifyProvider'
import styles from '../styles/Home.module.css'
import useEmblaCarousel from 'embla-carousel-react'
import SvgAngleCarreGauche from '../images/svg/AngleCarreGauche'
import SvgAngleCarreDroit from '../images/svg/AngleCarreDroit'
import SvgAnglePetitGauche from '../images/svg/AnglePetitGauche'
import SvgAnglePetitDroit from '../images/svg/AnglePetitDroit'



export default function Index(props: any) {

  const [emblaRefAttractions, emblaApiAttractions] = useEmblaCarousel({ slidesToScroll: 4 })
  const [emblaRefEvents, emblaApiEvents] = useEmblaCarousel({ slidesToScroll: 4 })

  const scrollPrevAttractions = useCallback(() => {
    if (emblaApiAttractions) emblaApiAttractions.scrollPrev()
  }, [emblaApiAttractions])

  const scrollNextAttractions = useCallback(() => {
    if (emblaApiAttractions) emblaApiAttractions.scrollNext()
  }, [emblaApiAttractions])

  const scrollPrevEvents = useCallback(() => {
    if (emblaApiEvents) emblaApiEvents.scrollPrev()
  }, [emblaApiEvents])

  const scrollNextEvents = useCallback(() => {
    if (emblaApiEvents) emblaApiEvents.scrollNext()
  }, [emblaApiEvents])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='container h-screen bg-slate-100' >

        <div className='text-3xl'>Tous les artistes</div>
        <div className='overflow-hidden group relative px-10'>
          <div className="overflow-hidden" ref={emblaRefAttractions}>

            <div className="flex box-border divide-x-2 h-[160px] ">
              {props.attractions.map((item: any, index: any) => {
                console.log("ðŸš€ ~ file: index.tsx ~ line 24 ~ {props.data.results.map ~ item", item)
                return (
                  <Link
                    key={index}
                    href={{
                      // pathname: '/Home',
                      // query: { token: props.secrets.spotify.bearerToken },
                    }}
                    passHref
                  >
                    <div className='flex-[0_0_200px] p-2 bg-white border-zinc-200 border-y-2 first:border-l-2 last:border-r-2 ...' >
                      <div className=' h-[100px] relative' >
                        {item.images[0].url && <Image src={item.images[0].url} alt="artist photo" layout='fill' objectFit='inherit' />}
                      </div>                        <p className='text-center text-sm mt-2'>{item.name}</p>
                    </div>
                  </Link>
                )
              })
              }
            </div>
          </div>
          <button className="absolute bottom-16 opacity-30 group-hover:opacity-70  left-0" onClick={scrollPrevAttractions}>
            <SvgAngleCarreGauche />
          </button>
          <button className="absolute bottom-16 opacity-30 group-hover:opacity-70 right-0" onClick={scrollNextAttractions}>
            <SvgAngleCarreDroit />
          </button>
        </div>


        <div className='text-3xl'>Les prochaines dates de concerts Ã  New-York</div>

        <div className='overflow-hidden group relative'>
          <div className="" ref={emblaRefEvents}>

            <div className="flex box-border divide-x-2 h-[500px] ">
              {props.events.map((item: any, index: any) => {
                console.log("ðŸš€ ~ file: index.tsx ~ line 24 ~ {props.data.results.map ~ item", item)
                return (
                  <Link
                    key={index}
                    href={{
                      // pathname: '/Home',
                      // query: { token: props.secrets.spotify.bearerToken },
                    }}
                    passHref
                  >
                    <div className='flex-[0_0_350px] p-5 bg-white border-zinc-200 border-y-2 first:border-l-2 last:border-r-2 ...' >
                      <div className=' h-[200px] relative' >
                        {item.images[0].url && <Image src={item.images[0].url} alt="artist photo" layout='fill' objectFit='inherit' />}
                      </div>
                      <div className='p-5'>
                        <p className='mb-5 mt-2'>{item.name}</p>
                        {/* {item.entities[0] ? <p>{item.entities[0].name}</p> : '' */}
                        <p className='mb-1'>{item._embedded.venues[0].name} Ã  {item._embedded.venues[0].city.name}</p>
                        <p>{item.dates.start.localDate} Ã  {item.dates.start.localTime}</p>
                        {item.priceRanges ? <p>{item.priceRanges[0].min ?? 'no'}</p> : <p>No Price Info</p>}
                        <p>{item.classifications[0].segment.name}</p>

                      </div>
                    </div>
                  </Link>
                )
              })
              }
            </div>
          </div>
          <button className="absolute bottom-56 opacity-30 group-hover:opacity-70 left-0" onClick={scrollPrevEvents}>
            <Image src="/images/svg/angle-petit-gauche.png" alt="next button" layout='fill' objectFit='inherit' />          </button>
          <button className="absolute bottom-56 opacity-30 group-hover:opacity-70" onClick={scrollNextEvents}>
            <Image src="/images/svg/angle-petit-droit.png" alt="next button" layout='fill' objectFit='inherit' />
          </button>
        </div>
      </main>
    </div>
  )
}

Index.getLayout = function getLayout(page: ReactElement) {

  const toktok = 'toktok';


  return (

    <Layout>
      {page}
    </Layout>

  )
}





export async function getStaticProps() {

  const secrets = await getSecrets();

  const attractionsRes = await fetch(`https://app.ticketmaster.com/discovery/v2/attractions.json?apikey=${process.env.ACCESS_TOKEN}&classificationName=[Music]&size=40`);
  const attractionsJsonRes = await attractionsRes.json();
  const attractions = attractionsJsonRes._embedded.attractions;

  const eventsRes = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${process.env.ACCESS_TOKEN}&classificationName=[Music]&countryCode=US&dmaId=345&size=200`);
  console.log("ðŸš€ ~ file: index.tsx ~ line 102 ~ getStaticProps ~ eventsRes", eventsRes)
  const eventsJsonRes = await eventsRes.json();
  const events = eventsJsonRes._embedded.events.filter((item, index, self) => {
    return index === self.findIndex((t) => (
      t.name === item.name
    ))
  });
  console.log("ðŸš€ ~ file: index.tsx ~ line 98 ~ getStaticProps ~ resvvv", events)

  return {
    props: {
      secrets,
      attractions,
      events
    }
  }
}



